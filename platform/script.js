// === Global Variables ===
let currentTechnique = null;
let currentPosition = "sitting";
let pose = null;
let camera = null;
let isAIActive = false;

// === Language Management ===
// === Language Management (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà) ===
class LanguageManager {
    constructor() {
        this.currentLanguage = "th";
        this.translations = {
            th: {
                // Page Meta
                title: "Taijiquan Academy - ‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡πÅ‡∏ö‡∏ö‡∏à‡∏µ‡∏ô‡πÇ‡∏ö‡∏£‡∏≤‡∏ì",
                
                // Navigation
                navHome: "‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å",
                navMission: "‡∏õ‡∏£‡∏±‡∏ä‡∏ç‡∏≤", 
                navSilkReeling: "Silk Reeling",
                navInstructor: "‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô",
                navFeatures: "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥",
                navContact: "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤",
                
                // Hero Section
                heroTitle: "‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡πÅ‡∏ö‡∏ö‡∏à‡∏µ‡∏ô‡πÇ‡∏ö‡∏£‡∏≤‡∏ì",
                heroAccent: "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏à",
                heroSubtitle: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ Silk Reeling ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ AI",
                ctaButton: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ",
                
                // Mission Section
                missionTitle: "‡∏õ‡∏£‡∏±‡∏ä‡∏ç‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤",
                missionText: "‡∏ó‡∏µ‡πà Taijiquan Academy ‡πÄ‡∏£‡∏≤‡πÅ‡∏ö‡πà‡∏á‡∏õ‡∏±‡∏ô‡πÅ‡∏Å‡πà‡∏ô‡πÅ‡∏ó‡πâ‡∏Ç‡∏≠‡∏á‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏à‡∏µ‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ‡πÄ‡∏£‡∏≤‡πÄ‡∏™‡∏ô‡∏≠‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏Å‡πà‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏£‡∏•‡∏∏‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î",
                
                // Silk Reeling Section
                silkReelingTitle: "12 ‡∏ó‡πà‡∏≤ Silk Reeling",
                silkReelingSubtitle: "‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ó‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ 3 ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: ‡∏ô‡∏±‡πà‡∏á ‡∏¢‡∏∑‡∏ô ‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡πà‡∏≠",
                tabAll: "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                tabSitting: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏±‡πà‡∏á",
                tabStanding: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô", 
                tabLowStanding: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡πà‡∏≠",
                learnBtn: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ",
                
                // Instructor Section
                instructorTitle: "‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û",
                instructorName: "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÑ‡∏ó ‡∏à‡∏µ",
                instructorRole: "‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡πÑ‡∏ó‡∏à‡∏¥‡πÅ‡∏•‡∏∞‡∏≠‡∏π‡πà‡∏ã‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û (‡∏î‡∏±‡πâ‡∏ô 6)",
                instructorBio: "‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô‡∏õ‡∏µ 2520 ‡πÉ‡∏ô‡∏°‡∏ì‡∏ë‡∏•‡πÄ‡∏´‡∏≠‡∏´‡∏ô‡∏≤‡∏ô ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏à‡∏µ‡∏ô ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡∏ó‡∏≠‡∏î‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏ö‡∏£‡∏£‡∏û‡∏ö‡∏∏‡∏£‡∏∏‡∏©‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏î‡πÄ‡∏™‡πâ‡∏≤‡∏´‡∏•‡∏¥‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏î‡∏≤ ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 20 ‡∏õ‡∏µ ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≤‡∏Å‡∏•",
                knowMore: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
                
                // Features Section
                featuresTitle: "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©",
                feature1Title: "‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô",
                feature1Desc: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢‡πÉ‡∏à ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô",
                feature2Title: "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô",
                feature2Desc: "‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏•‡∏±‡∏á‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á",
                feature3Title: "‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π",
                feature3Desc: "‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏≥‡∏ö‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ü‡∏∑‡πâ‡∏ô‡∏ü‡∏π‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏¢",
                feature4Title: "AI Motion Analysis",
                feature4Desc: "‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå",
                feature5Title: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå",
                feature5Desc: "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå",
                feature6Title: "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤",
                feature6Desc: "‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ",
                
                // Contact Section
                contactTitle: "‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤",
                contactName: "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•",
                contactEmail: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•",
                contactPhone: "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå",
                contactMessage: "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
                submitBtn: "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
                contactInfo: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠",
                
                // About Section
                aboutTitle: "‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤",
                aboutText: "Taijiquan Academy ‡∏Å‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏™‡∏±‡∏¢‡∏ó‡∏±‡∏®‡∏ô‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏®‡∏¥‡∏•‡∏õ‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏à‡∏µ‡∏ô‡πÇ‡∏ö‡∏£‡∏≤‡∏ì ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏¢‡∏∏‡∏Ñ‡πÉ‡∏´‡∏°‡πà ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ AI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•",
                
                // Modal
                positionSitting: "ü™ë ‡∏ô‡∏±‡πà‡∏á",
                positionStanding: "üßç ‡∏¢‡∏∑‡∏ô", 
                positionLowStanding: "ü§∏ ‡∏¢‡∏∑‡∏ô‡∏¢‡πà‡∏≠",
                aiAnalysisTitle: "ü§ñ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI",
                startAnalysis: "üìπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á",
                stopAnalysis: "‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå",
                aiInitMessage: "‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á",
                descriptionTitle: "üìñ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
                keyPointsTitle: "üéØ ‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", 
                mistakesTitle: "‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ö‡πà‡∏≠‡∏¢",
                breathingTitle: "ü´Å ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢‡πÉ‡∏à",
                tipsTitle: "üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å"
            },
            
            en: {
                // Page Meta
                title: "Taijiquan Academy - Ancient Chinese Martial Arts",
                
                // Navigation
                navHome: "Home",
                navMission: "Philosophy",
                navSilkReeling: "Silk Reeling", 
                navInstructor: "Instructor",
                navFeatures: "Features",
                navContact: "Contact",
                
                // Hero Section
                heroTitle: "Ancient Chinese Martial Arts",
                heroAccent: "for Physical and Mental Health",
                heroSubtitle: "Start learning Silk Reeling with AI Technology",
                ctaButton: "Start Learning",
                
                // Mission Section
                missionTitle: "Our Philosophy",
                missionText: "At Taijiquan Academy, we share the essence of Chinese martial arts so that everyone can benefit by applying the principles to daily life. We offer simple and effective methods for students to achieve optimal health.",
                
                // Silk Reeling Section
                silkReelingTitle: "12 Silk Reeling Forms",
                silkReelingSubtitle: "Each form includes 3 variations: Sitting, Standing, and Low Standing",
                tabAll: "All",
                tabSitting: "Sitting Form",
                tabStanding: "Standing Form",
                tabLowStanding: "Low Standing Form",
                learnBtn: "Learn",
                
                // Instructor Section
                instructorTitle: "Professional Instructor",
                instructorName: "Master Tai Chi",
                instructorRole: "Professional Taiji and Wushu Instructor (6th Dan)",
                instructorBio: "Born in 1977 in Henan Province, China. Received martial arts training from ancestors of Shaolin Temple under strict guidance from his father. Has over 20 years of teaching experience and is internationally recognized.",
                knowMore: "Learn More",
                
                // Features Section
                featuresTitle: "Special Features",
                feature1Title: "Suitable for Beginners",
                feature1Desc: "Learn basic forms and breathing with step-by-step guidance",
                feature2Title: "For Intermediate Practitioners", 
                feature2Desc: "Focus on internal energy and advanced techniques",
                feature3Title: "Therapy and Recovery",
                feature3Desc: "Focus on healing and recovery, suitable for all ages",
                feature4Title: "AI Motion Analysis",
                feature4Desc: "AI technology analyzes posture and provides real-time guidance",
                feature5Title: "Online Learning",
                feature5Desc: "Learn anytime, anywhere via mobile or computer",
                feature6Title: "Progress Tracking",
                feature6Desc: "System to track and analyze learning progress",
                
                // Contact Section
                contactTitle: "Contact Us",
                contactName: "Full Name",
                contactEmail: "Email",
                contactPhone: "Phone Number",
                contactMessage: "Message",
                submitBtn: "Send Message",
                contactInfo: "Contact Information",
                
                // About Section
                aboutTitle: "About Us",
                aboutText: "Taijiquan Academy was founded with the vision of presenting ancient Chinese martial arts in an accessible and modern way, through the integration of AI technology for efficient and personalized learning.",
                
                // Modal
                positionSitting: "ü™ë Sitting",
                positionStanding: "üßç Standing",
                positionLowStanding: "ü§∏ Low Standing", 
                aiAnalysisTitle: "ü§ñ AI Posture Analysis",
                startAnalysis: "üìπ Start Posture Analysis",
                stopAnalysis: "‚èπÔ∏è Stop Analysis",
                aiInitMessage: "Turn on camera to start posture analysis",
                descriptionTitle: "üìñ Description",
                keyPointsTitle: "üéØ Key Points",
                mistakesTitle: "‚ö†Ô∏è Common Mistakes",
                breathingTitle: "ü´Å Breathing Technique",
                tipsTitle: "üí° Practice Tips"
            },
            
            zh: {
                // Page Meta
                title: "Â§™ÊûÅÊã≥Â≠¶Èô¢ - ‰∏≠ÂõΩÂè§‰ª£Ê≠¶ÊúØ",
                
                // Navigation
                navHome: "È¶ñÈ°µ",
                navMission: "ÁêÜÂøµ",
                navSilkReeling: "Áº†‰∏ùÂä≤",
                navInstructor: "ÊïôÁªÉ",
                navFeatures: "ÁâπËâ≤",
                navContact: "ËÅîÁ≥ª",
                
                // Hero Section
                heroTitle: "‰∏≠ÂõΩÂè§‰ª£Ê≠¶ÊúØ",
                heroAccent: "Ë∫´ÂøÉÂÅ•Â∫∑‰πãÈÅì",
                heroSubtitle: "ÂºÄÂßãÁî®‰∫∫Â∑•Êô∫ËÉΩÊäÄÊúØÂ≠¶‰π†Áº†‰∏ùÂä≤",
                ctaButton: "ÂºÄÂßãÂ≠¶‰π†",
                
                // Mission Section
                missionTitle: "Êàë‰ª¨ÁöÑÁêÜÂøµ",
                missionText: "Âú®Â§™ÊûÅÊã≥Â≠¶Èô¢ÔºåÊàë‰ª¨ÂàÜ‰∫´‰∏≠ÂõΩÊ≠¶ÊúØÁöÑÁ≤æÈ´ìÔºåËÆ©ÊØè‰∏™‰∫∫ÈÉΩËÉΩÈÄöËøáÂ∞ÜÂéüÁêÜÂ∫îÁî®Âà∞Êó•Â∏∏ÁîüÊ¥ª‰∏≠ËÄåÂèóÁõä„ÄÇÊàë‰ª¨‰∏∫Â≠¶ÁîüÊèê‰æõÁÆÄÂçïÊúâÊïàÁöÑÊñπÊ≥ïÊù•ÂÆûÁé∞ÊúÄ‰Ω≥ÂÅ•Â∫∑„ÄÇ",
                
                // Silk Reeling Section
                silkReelingTitle: "Áº†‰∏ùÂä≤ÂçÅ‰∫åÂºè",
                silkReelingSubtitle: "ÊØèÂºèÂåÖÂê´3ÁßçÂèòÂåñÔºöÂùêÂºè„ÄÅÁ´ôÂºèÂíå‰ΩéÂºè",
                tabAll: "ÂÖ®ÈÉ®",
                tabSitting: "ÂùêÂºè",
                tabStanding: "Á´ôÂºè", 
                tabLowStanding: "‰ΩéÂºè",
                learnBtn: "Â≠¶‰π†",
                
                // Instructor Section
                instructorTitle: "‰∏ì‰∏öÊïôÁªÉ",
                instructorName: "Â§™ÊûÅÂ∏àÂÇÖ",
                instructorRole: "‰∏ì‰∏öÂ§™ÊûÅÊ≠¶ÊúØÊïôÁªÉÔºàÂÖ≠ÊÆµÔºâ",
                instructorBio: "1977Âπ¥Áîü‰∫é‰∏≠ÂõΩÊ≤≥ÂçóÁúÅ„ÄÇÂú®Áà∂‰∫≤ÁöÑ‰∏•Ê†ºÊåáÂØº‰∏ãÔºå‰ªéÂ∞ëÊûóÂØ∫Á•ñÂ∏àÈÇ£ÈáåÊé•ÂèóÊ≠¶ÊúØËÆ≠ÁªÉ„ÄÇÊã•Êúâ20Â§öÂπ¥ÁöÑÊïôÂ≠¶ÁªèÈ™åÔºåËé∑ÂæóÂõΩÈôÖËÆ§ÂèØ„ÄÇ",
                knowMore: "‰∫ÜËß£Êõ¥Â§ö",
                
                // Features Section
                featuresTitle: "ÁâπËâ≤ÂäüËÉΩ",
                feature1Title: "ÈÄÇÂêàÂàùÂ≠¶ËÄÖ",
                feature1Desc: "Â≠¶‰π†Âü∫Êú¨ÊãõÂºèÂíåÂëºÂê∏Ê≥ïÔºåÊèê‰æõÂàÜÊ≠•ÊåáÂØº",
                feature2Title: "ÈÄÇÂêàÊúâÂü∫Á°ÄËÄÖ",
                feature2Desc: "‰∏ìÊ≥®ÂÜÖÂä≤ÂíåÈ´òÁ∫ßÊäÄÂ∑ß",
                feature3Title: "Ê≤ªÁñóÂ∫∑Â§ç",
                feature3Desc: "‰∏ìÊ≥®Ê≤ªÁñóÂíåÂ∫∑Â§çÔºåÈÄÇÂêàÊâÄÊúâÂπ¥ÈæÑ",
                feature4Title: "AIÂä®‰ΩúÂàÜÊûê",
                feature4Desc: "AIÊäÄÊúØÂàÜÊûêÂßøÂäøÂπ∂Êèê‰æõÂÆûÊó∂ÊåáÂØº",
                feature5Title: "Âú®Á∫øÂ≠¶‰π†",
                feature5Desc: "ÈöèÊó∂ÈöèÂú∞ÈÄöËøáÊâãÊú∫ÊàñÁîµËÑëÂ≠¶‰π†",
                feature6Title: "ËøõÂ∫¶Ë∑üË∏™",
                feature6Desc: "Ë∑üË∏™ÂíåÂàÜÊûêÂ≠¶‰π†ËøõÂ∫¶ÁöÑÁ≥ªÁªü",
                
                // Contact Section
                contactTitle: "ËÅîÁ≥ªÊàë‰ª¨",
                contactName: "ÂßìÂêç",
                contactEmail: "ÈÇÆÁÆ±",
                contactPhone: "ÁîµËØù",
                contactMessage: "ÁïôË®Ä",
                submitBtn: "ÂèëÈÄÅÊ∂àÊÅØ",
                contactInfo: "ËÅîÁ≥ª‰ø°ÊÅØ",
                
                // About Section
                aboutTitle: "ÂÖ≥‰∫éÊàë‰ª¨",
                aboutText: "Â§™ÊûÅÊã≥Â≠¶Èô¢ÁöÑÊàêÁ´ãÊÑøÊôØÊòØÈÄöËøáÊï¥ÂêàAIÊäÄÊúØÔºå‰ª•Áé∞‰ª£ÂåñÂíå‰∏™ÊÄßÂåñÁöÑÊñπÂºèÂëàÁé∞‰∏≠ÂõΩÂè§‰ª£Ê≠¶ÊúØÔºåÂÆûÁé∞È´òÊïàÂ≠¶‰π†„ÄÇ",
                
                // Modal
                positionSitting: "ü™ë ÂùêÂºè",
                positionStanding: "üßç Á´ôÂºè",
                positionLowStanding: "ü§∏ ‰ΩéÂºè",
                aiAnalysisTitle: "ü§ñ AIÂßøÂäøÂàÜÊûê",
                startAnalysis: "üìπ ÂºÄÂßãÂßøÂäøÂàÜÊûê",
                stopAnalysis: "‚èπÔ∏èÂÅúÊ≠¢ÂàÜÊûê",
                aiInitMessage: "ÊâìÂºÄÊëÑÂÉèÂ§¥ÂºÄÂßãÂßøÂäøÂàÜÊûê",
                descriptionTitle: "üìñ ÊèèËø∞",
                keyPointsTitle: "üéØ Ë¶ÅÁÇπ",
                mistakesTitle: "‚ö†Ô∏è Â∏∏ËßÅÈîôËØØ",
                breathingTitle: "ü´Å ÂëºÂê∏ÊäÄÂ∑ß",
                tipsTitle: "üí° ÁªÉ‰π†ÊäÄÂ∑ß"
            }
        };
    }
    
    switchLanguage(lang) {
        this.currentLanguage = lang;
        this.updateUI();
        this.updateActiveLanguage();
    }
    
    updateUI() {
        const t = this.translations[this.currentLanguage];
        
        // Update page title
        document.title = t.title;
        
        // Update navigation
        this.updateElementText('.nav-links a[href="#home"]', t.navHome);
        this.updateElementText('.nav-links a[href="#mission"]', t.navMission);
        this.updateElementText('.nav-links a[href="#silk-reeling"]', t.navSilkReeling);
        this.updateElementText('.nav-links a[href="#instructor"]', t.navInstructor);
        this.updateElementText('.nav-links a[href="#features"]', t.navFeatures);
        this.updateElementText('.nav-links a[href="#contact"]', t.navContact);
        
        // Update hero section
        const heroTitle = document.querySelector('.hero-title');
        if (heroTitle) {
            heroTitle.innerHTML = `${t.heroTitle} <span class="accent">${t.heroAccent}</span>`;
        }
        this.updateElementText('.hero-subtitle', t.heroSubtitle);
        this.updateElementText('.cta-button', t.ctaButton);
        
        // Update mission section
        this.updateElementText('#mission .section-title', t.missionTitle);
        this.updateElementText('.mission-text', t.missionText);
        
        // Update silk reeling section
        this.updateElementText('#silk-reeling .section-title', t.silkReelingTitle);
        this.updateElementText('.section-subtitle', t.silkReelingSubtitle);
        this.updateElementText('[data-position="all"]', t.tabAll);
        this.updateElementText('[data-position="sitting"]', t.tabSitting);
        this.updateElementText('[data-position="standing"]', t.tabStanding);
        this.updateElementText('[data-position="low-standing"]', t.tabLowStanding);
        
        // Update all learn buttons
        document.querySelectorAll('.learn-btn').forEach(btn => {
            btn.textContent = t.learnBtn;
        });
        
        // Update instructor section
        this.updateElementText('#instructor .section-title', t.instructorTitle);
        this.updateElementText('.instructor-info h3', t.instructorName);
        this.updateElementText('.instructor-title', t.instructorRole);
        this.updateElementText('.instructor-bio', t.instructorBio);
        this.updateElementText('.know-more', t.knowMore);
        
        // Update features section
        this.updateElementText('#features .section-title', t.featuresTitle);
        const featureCards = document.querySelectorAll('.feature-card');
        if (featureCards.length >= 6) {
            this.updateElementText(featureCards[0].querySelector('.feature-title'), t.feature1Title);
            this.updateElementText(featureCards[0].querySelector('.feature-desc'), t.feature1Desc);
            this.updateElementText(featureCards[1].querySelector('.feature-title'), t.feature2Title);
            this.updateElementText(featureCards[1].querySelector('.feature-desc'), t.feature2Desc);
            this.updateElementText(featureCards[2].querySelector('.feature-title'), t.feature3Title);
            this.updateElementText(featureCards[2].querySelector('.feature-desc'), t.feature3Desc);
            this.updateElementText(featureCards[3].querySelector('.feature-title'), t.feature4Title);
            this.updateElementText(featureCards[3].querySelector('.feature-desc'), t.feature4Desc);
            this.updateElementText(featureCards[4].querySelector('.feature-title'), t.feature5Title);
            this.updateElementText(featureCards[4].querySelector('.feature-desc'), t.feature5Desc);
            this.updateElementText(featureCards[5].querySelector('.feature-title'), t.feature6Title);
            this.updateElementText(featureCards[5].querySelector('.feature-desc'), t.feature6Desc);
        }
        
        // Update contact section
        this.updateElementText('#contact .section-title', t.contactTitle);
        this.updateElementText('label[for="name"]', t.contactName);
        this.updateElementText('label[for="email"]', t.contactEmail);
        this.updateElementText('label[for="phone"]', t.contactPhone);
        this.updateElementText('label[for="message"]', t.contactMessage);
        this.updateElementText('.submit-btn', t.submitBtn);
        this.updateElementText('.contact-details h4', t.contactInfo);
        
        // Update about section
        this.updateElementText('#about .section-title', t.aboutTitle);
        this.updateElementText('.about-text', t.aboutText);
        
        // Update modal elements (if modal is open)
        this.updateElementText('[data-pos="sitting"]', t.positionSitting);
        this.updateElementText('[data-pos="standing"]', t.positionStanding);
        this.updateElementText('[data-pos="low-standing"]', t.positionLowStanding);
        this.updateElementText('.ai-analysis-panel h4', t.aiAnalysisTitle);
        this.updateElementText('#startCamera', t.startAnalysis);
        this.updateElementText('#stopCamera', t.stopAnalysis);
        
        // Update technique details titles
        this.updateTechniqueDetailsTitles(t);
    }
    
    updateElementText(selector, text) {
        const element = typeof selector === 'string' ? document.querySelector(selector) : selector;
        if (element && text) {
            element.textContent = text;
        }
    }
    
    updateTechniqueDetailsTitles(t) {
        const modal = document.getElementById('techniqueModal');
        if (modal && modal.style.display !== 'none') {
            // Update technique details section titles
            const detailsSection = document.getElementById('techniqueDetails');
            if (detailsSection) {
                const h4Elements = detailsSection.querySelectorAll('h4');
                if (h4Elements.length >= 5) {
                    h4Elements[0].textContent = t.descriptionTitle;
                    h4Elements[1].textContent = t.keyPointsTitle;
                    h4Elements[2].textContent = t.mistakesTitle;
                    h4Elements[3].textContent = t.breathingTitle;
                    h4Elements[4].textContent = t.tipsTitle;
                }
            }
        }
    }
    
    updateActiveLanguage() {
        document.querySelectorAll('.language-option').forEach(option => {
            option.classList.remove('active');
            if (option.dataset.lang === this.currentLanguage) {
                option.classList.add('active');
            }
        });
        
        // Update toggle button
        const toggleButton = document.querySelector('.language-toggle');
        if (toggleButton) {
            const flags = { 
                th: 'üáπüá≠ ‡πÑ‡∏ó‡∏¢', 
                en: 'üá∫üá∏ English', 
                zh: 'üá®üá≥ ‰∏≠Êñá' 
            };
            toggleButton.innerHTML = `${flags[this.currentLanguage]} <span class="dropdown-arrow">‚ñº</span>`;
        }
    }
    
    // Method to get current translation
    t(key) {
        return this.translations[this.currentLanguage][key] || key;
    }
}

// === Technique Management System ===
class TechniqueManager {
  constructor() {
    this.loadTechniqueData();
    this.initializeEventListeners();
  }

  loadTechniqueData() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å technique-data.js ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (typeof techniqueData === "undefined") {
      console.warn("Technique data not loaded");
      return;
    }
    this.data = techniqueData;
  }

  initializeEventListeners() {
    // Position filter tabs
    document.querySelectorAll(".tab-btn").forEach((btn) => {
      btn.addEventListener("click", (e) => {
        this.filterByPosition(e.target.dataset.position);
      });
    });
  }

  filterByPosition(position) {
    // Update active tab
    document.querySelectorAll(".tab-btn").forEach((btn) => {
      btn.classList.remove("active");
    });
    document
      .querySelector(`[data-position="${position}"]`)
      .classList.add("active");

    // Filter cards
    const cards = document.querySelectorAll(".silk-card");
    cards.forEach((card) => {
      if (position === "all") {
        card.classList.remove("hidden");
      } else {
        const cardPositions = card.dataset.positions.split(",");
        if (cardPositions.includes(position)) {
          card.classList.remove("hidden");
        } else {
          card.classList.add("hidden");
        }
      }
    });
  }

  getTechniqueData(techniqueId, position) {
    if (!this.data || !this.data[techniqueId]) {
      return null;
    }
    return this.data[techniqueId].positions[position] || null;
  }
}

// === AI Motion Analysis System ===
class AIMotionAnalysis {
  constructor() {
    this.isInitialized = false;
    this.isAnalyzing = false;
    this.pose = null;
    this.camera = null;
    this.canvas = null;
    this.ctx = null;
    this.video = null;
    this.feedbackElement = null;
  }

  async initialize() {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏•‡∏î MediaPipe libraries ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (typeof Pose === "undefined") {
        throw new Error("MediaPipe Pose library not loaded");
      }

      this.canvas = document.getElementById("output_canvas");
      this.ctx = this.canvas.getContext("2d");
      this.feedbackElement = document.getElementById("aiFeedback");
      this.video = document.createElement("video");

      // Initialize MediaPipe Pose
      this.pose = new Pose({
        locateFile: (file) =>
          `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`,
      });

      this.pose.setOptions({
        modelComplexity: 1,
        smoothLandmarks: true,
        minDetectionConfidence: 0.5,
        minTrackingConfidence: 0.5,
      });

      this.pose.onResults((results) => this.onResults(results));

      this.isInitialized = true;
      this.updateFeedback("‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "success");
    } catch (error) {
      console.error("AI initialization failed:", error);
      this.updateFeedback(
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï",
        "error"
      );
    }
  }

  async startAnalysis() {
    if (!this.isInitialized) {
      await this.initialize();
      if (!this.isInitialized) return;
    }

    try {
      // Initialize camera
      this.camera = new Camera(this.video, {
        onFrame: async () => {
          if (this.isAnalyzing) {
            await this.pose.send({ image: this.video });
          }
        },
        width: 320,
        height: 240,
      });

      await this.camera.start();
      this.isAnalyzing = true;

      // Update UI
      document.getElementById("startCamera").style.display = "none";
      document.getElementById("stopCamera").style.display = "inline-block";

      this.updateFeedback(
        "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á... ‡πÇ‡∏õ‡∏£‡∏î‡∏¢‡∏∑‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á",
        "info"
      );
    } catch (error) {
      console.error("Failed to start camera:", error);
      this.updateFeedback(
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á",
        "error"
      );
    }
  }

  stopAnalysis() {
    this.isAnalyzing = false;

    if (this.camera) {
      this.camera.stop();
    }

    // Clear canvas
    if (this.ctx) {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    }

    // Update UI
    document.getElementById("startCamera").style.display = "inline-block";
    document.getElementById("stopCamera").style.display = "none";

    this.updateFeedback("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß", "info");
  }

  onResults(results) {
    if (!this.isAnalyzing) return;

    // Clear canvas and draw video
    this.ctx.save();
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.ctx.drawImage(
      results.image,
      0,
      0,
      this.canvas.width,
      this.canvas.height
    );

    if (results.poseLandmarks) {
      // Draw pose landmarks
      this.drawConnectors(results.poseLandmarks, POSE_CONNECTIONS);
      this.drawLandmarks(results.poseLandmarks);

      // Analyze posture
      this.analyzePose(results.poseLandmarks);
    } else {
      this.updateFeedback(
        "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏û ‡πÇ‡∏õ‡∏£‡∏î‡∏¢‡∏∑‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏•‡πâ‡∏≠‡∏á",
        "warning"
      );
    }

    this.ctx.restore();
  }

  drawConnectors(landmarks, connections) {
    this.ctx.strokeStyle = "#00FF00";
    this.ctx.lineWidth = 2;
    this.ctx.beginPath();

    for (const connection of connections) {
      const start = landmarks[connection[0]];
      const end = landmarks[connection[1]];

      if (start && end) {
        this.ctx.moveTo(
          start.x * this.canvas.width,
          start.y * this.canvas.height
        );
        this.ctx.lineTo(end.x * this.canvas.width, end.y * this.canvas.height);
      }
    }

    this.ctx.stroke();
  }

  drawLandmarks(landmarks) {
    this.ctx.fillStyle = "#FF0000";

    for (const landmark of landmarks) {
      this.ctx.beginPath();
      this.ctx.arc(
        landmark.x * this.canvas.width,
        landmark.y * this.canvas.height,
        3,
        0,
        2 * Math.PI
      );
      this.ctx.fill();
    }
  }

  analyzePose(landmarks) {
    try {
      // Basic posture analysis
      const leftShoulder = landmarks[11];
      const rightShoulder = landmarks[12];
      const leftWrist = landmarks[15];
      const rightWrist = landmarks[16];

      let feedback = [];

      // Check shoulder alignment
      const shoulderDiff = Math.abs(leftShoulder.y - rightShoulder.y);
      if (shoulderDiff > 0.05) {
        feedback.push("‚ö†Ô∏è ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏´‡∏•‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô");
      }

      // Check arm position for current technique
      if (currentTechnique && currentPosition) {
        const techniqueData = techniqueManager.getTechniqueData(
          currentTechnique,
          currentPosition
        );
        if (techniqueData) {
          feedback.push("‚úÖ ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏î‡∏π‡∏î‡∏µ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏´‡∏ß‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á");
        }
      }

      // Update feedback
      if (feedback.length > 0) {
        this.updateFeedback(feedback.join("<br>"), "info");
      } else {
        this.updateFeedback("‚úÖ ‡∏ó‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏î‡∏µ‡∏°‡∏≤‡∏Å!", "success");
      }
    } catch (error) {
      console.error("Pose analysis error:", error);
    }
  }

  updateFeedback(message, type = "info") {
    if (!this.feedbackElement) return;

    this.feedbackElement.innerHTML = message;
    this.feedbackElement.className = `ai-feedback ${type}`;
  }
}

// === Modal Management ===
class ModalManager {
  constructor() {
    this.currentModal = null;
    this.initializeEventListeners();
  }

  initializeEventListeners() {
    // Close modal when clicking outside
    window.addEventListener("click", (e) => {
      if (e.target.classList.contains("modal")) {
        this.closeModal();
      }
    });

    // Close modal with ESC key
    window.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && this.currentModal) {
        this.closeModal();
      }
    });
  }

  openModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.style.display = "block";
      this.currentModal = modal;
      document.body.style.overflow = "hidden"; // Prevent scrolling
    }
  }

  closeModal() {
    if (this.currentModal) {
      this.currentModal.style.display = "none";
      document.body.style.overflow = "auto"; // Restore scrolling

      // Stop AI analysis if modal is closing
      if (aiAnalysis && aiAnalysis.isAnalyzing) {
        aiAnalysis.stopAnalysis();
      }

      this.currentModal = null;
    }
  }
}

// === Notification System ===
class NotificationSystem {
  constructor() {
    this.container = this.createContainer();
  }

  createContainer() {
    const container = document.createElement("div");
    container.id = "notification-container";
    container.style.cssText = `
            position: fixed;
            top: 100px;
            right: 20px;
            z-index: 10000;
            pointer-events: none;
        `;
    document.body.appendChild(container);
    return container;
  }

  show(message, type = "info", duration = 3000) {
    const notification = document.createElement("div");
    notification.className = `notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
            padding: 1rem 1.5rem;
            margin-bottom: 10px;
            border-radius: 8px;
            color: white;
            font-weight: bold;
            pointer-events: auto;
            animation: slideInRight 0.3s ease-out;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        `;

    // Set background color based on type
    const colors = {
      success: "#10b981",
      error: "#ef4444",
      warning: "#f59e0b",
      info: "#3b82f6",
    };
    notification.style.background = colors[type] || colors.info;

    this.container.appendChild(notification);

    // Auto remove
    setTimeout(() => {
      if (notification.parentNode) {
        notification.style.animation = "slideOutRight 0.3s ease-in";
        setTimeout(() => {
          if (notification.parentNode) {
            this.container.removeChild(notification);
          }
        }, 300);
      }
    }, duration);
  }
}

// === Form Management ===
class FormManager {
  constructor() {
    this.initializeForms();
  }

  initializeForms() {
    // Contact form
    const contactForm = document.getElementById("contactForm");
    if (contactForm) {
      contactForm.addEventListener("submit", (e) => this.handleContactForm(e));
    }
  }

  handleContactForm(e) {
    e.preventDefault();

    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData);

    // Validate form
    if (!data.name || !data.email || !data.message) {
      notificationSystem.show("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", "error");
      return;
    }

    // Simulate form submission
    notificationSystem.show("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...", "info");

    setTimeout(() => {
      notificationSystem.show("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö!", "success");
      e.target.reset();
    }, 1000);
  }
}

// === Smooth Scrolling ===
class SmoothScroll {
  constructor() {
    this.initializeScrolling();
  }

  initializeScrolling() {
    // Add smooth scrolling to navigation links
    document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
      anchor.addEventListener("click", (e) => {
        e.preventDefault();
        const targetId = anchor.getAttribute("href");
        const targetElement = document.querySelector(targetId);

        if (targetElement) {
          const headerHeight = document.querySelector("header").offsetHeight;
          const targetPosition = targetElement.offsetTop - headerHeight - 20;

          window.scrollTo({
            top: targetPosition,
            behavior: "smooth",
          });
        }
      });
    });
  }
}

// === Global Functions ===

// Language toggle function
function toggleLanguage() {
  const menu = document.getElementById("languageMenu");
  menu.classList.toggle("show");

  // Close menu when clicking outside
  setTimeout(() => {
    document.addEventListener("click", function closeMenu(e) {
      if (!e.target.closest(".language-dropdown")) {
        menu.classList.remove("show");
        document.removeEventListener("click", closeMenu);
      }
    });
  }, 0);
}

// Technique modal functions
function openTechniqueModal(techniqueId, techniqueName) {
  currentTechnique = techniqueId;

  // Update modal title
  document.getElementById("modalTitle").textContent = techniqueName;

  // Load technique data
  loadTechniqueContent(techniqueId, currentPosition);

  // Open modal
  modalManager.openModal("techniqueModal");

  // Initialize AI if not already done
  if (!aiAnalysis.isInitialized) {
    aiAnalysis.initialize();
  }
}

function closeTechniqueModal() {
  modalManager.closeModal();
  currentTechnique = null;
}

function switchPosition(position) {
  currentPosition = position;

  // Update position buttons
  document.querySelectorAll(".position-btn").forEach((btn) => {
    btn.classList.remove("active");
    if (btn.dataset.pos === position) {
      btn.classList.add("active");
    }
  });

  // Load content for new position
  if (currentTechnique) {
    loadTechniqueContent(currentTechnique, position);
  }
}

function loadTechniqueContent(techniqueId, position) {
  const data = techniqueManager.getTechniqueData(techniqueId, position);

  if (!data) {
    document.getElementById("techniqueDetails").innerHTML =
      "<p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡πà‡∏≤‡∏ô‡∏µ‡πâ</p>";
    return;
  }

  // Update content
  document.getElementById("techniqueDescription").textContent =
    data.description || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢";

  // Update key points
  const keyPointsList = document.getElementById("keyPoints");
  keyPointsList.innerHTML = "";
  if (data.keyPoints && data.keyPoints.length > 0) {
    data.keyPoints.forEach((point) => {
      const li = document.createElement("li");
      li.textContent = point;
      keyPointsList.appendChild(li);
    });
  }

  // Update common mistakes
  const mistakesList = document.getElementById("commonMistakes");
  mistakesList.innerHTML = "";
  if (data.commonMistakes && data.commonMistakes.length > 0) {
    data.commonMistakes.forEach((mistake) => {
      const li = document.createElement("li");
      li.textContent = mistake;
      mistakesList.appendChild(li);
    });
  }

  // Update breathing technique
  document.getElementById("breathingTechnique").textContent =
    data.breathingTechnique || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";

  // Update practice tips
  document.getElementById("practiceTips").innerHTML = `<p>${
    data.tips || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
  }</p>`;
}

// AI Analysis functions
function startAIAnalysis() {
  if (aiAnalysis) {
    aiAnalysis.startAnalysis();
  }
}

function stopAIAnalysis() {
  if (aiAnalysis) {
    aiAnalysis.stopAnalysis();
  }
}

// === Initialize Application ===
let languageManager,
  techniqueManager,
  modalManager,
  aiAnalysis,
  notificationSystem,
  formManager,
  smoothScroll;

document.addEventListener("DOMContentLoaded", function () {
  // Initialize all systems
  languageManager = new LanguageManager();
  techniqueManager = new TechniqueManager();
  modalManager = new ModalManager();
  aiAnalysis = new AIMotionAnalysis();
  notificationSystem = new NotificationSystem();
  formManager = new FormManager();
  smoothScroll = new SmoothScroll();

  // Setup language dropdown
  document.querySelectorAll(".language-option").forEach((option) => {
    option.addEventListener("click", function () {
      const lang = this.dataset.lang;
      languageManager.switchLanguage(lang);
      document.getElementById("languageMenu").classList.remove("show");
    });
  });

  // Add loading animation
  const loadingAnimation = document.createElement("div");
  loadingAnimation.innerHTML = `
        <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255,255,255,0.9); z-index: 9999; display: flex; align-items: center; justify-content: center;" id="loadingScreen">
            <div style="text-align: center;">
                <div style="width: 50px; height: 50px; border: 3px solid #dc2626; border-top: 3px solid transparent; border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 20px;"></div>
                <p style="color: #dc2626; font-size: 1.2rem;">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
            </div>
        </div>
    `;
  document.body.appendChild(loadingAnimation);

  // Remove loading screen after initialization
  setTimeout(() => {
    const loadingScreen = document.getElementById("loadingScreen");
    if (loadingScreen) {
      loadingScreen.style.opacity = "0";
      setTimeout(() => {
        if (loadingScreen.parentNode) {
          loadingScreen.parentNode.removeChild(loadingScreen);
        }
      }, 300);
    }
  }, 1500);

  console.log("Taijiquan Academy System Initialized");
  console.log("Available systems:", {
    languageManager: !!languageManager,
    techniqueManager: !!techniqueManager,
    modalManager: !!modalManager,
    aiAnalysis: !!aiAnalysis,
    notificationSystem: !!notificationSystem,
  });
});

// Add custom CSS animations
const customStyles = document.createElement("style");
customStyles.textContent = `
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    
    @keyframes slideInRight {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes slideOutRight {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
    
    .ai-feedback.success { background: rgba(16, 185, 129, 0.1) !important; color: #059669 !important; }
    .ai-feedback.error { background: rgba(239, 68, 68, 0.1) !important; color: #dc2626 !important; }
    .ai-feedback.warning { background: rgba(245, 158, 11, 0.1) !important; color: #d97706 !important; }
    .ai-feedback.info { background: rgba(59, 130, 246, 0.1) !important; color: #2563eb !important; }
`;
document.head.appendChild(customStyles);
